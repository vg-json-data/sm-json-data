{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "id": "https://raw.githubusercontent.com/vg-json-data/sm-json-data/master/schema/m3-requirements.schema.json",
  "title": "Super Metroid Logical Requirements Schema",

  "definitions": {
    "logicalRequirements": {
      "type": "array",
      "title": "Logical Requirements",
      "description": "A logical condition that takes the form of equipment, tech, and flag requirements.",
      "items": {
        "$id": "#/definitions/logicalRequirements/items",
        "type": [
          "object",
          "string"
        ],
        "title": "Logical element",
        "description": "Elements are assumed to be ANDed together, except when inside an OR object.",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": false,
        "properties": {
          "and": {
            "$ref" : "#/definitions/logicalRequirements",
            "$id": "#/definitions/logicalRequirements/items/properties/and",
            "title": "AND Logical Element",
            "description": "Fulfilled if all logical elements inside are fulfilled."
          },
          "or": {
            "$ref" : "#/definitions/logicalRequirements",
            "$id": "#/definitions/logicalRequirements/items/properties/or",
            "title": "OR Logical Element",
            "description": "Fulfilled if at least one logical element inside is fulfilled."
          },
          "not": {
            "$id": "#/definitions/logicalRequirements/items/properties/not",
            "type": "string",
            "title": "NOT Logical Element",
            "description": "Fulfilled if the logical element given is not fullfilled."
          },
          "ammo": {
            "$id": "#/definitions/logicalRequirement/items/properties/ammo",
            "type": "object",
            "title": "Ammo Requirement",
            "description": "Fulfilled by spending ammo",
            "required": [
              "type",
              "count"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammo/properties/type",
                "type": "string",
                "enum": [
                  "Missile",
                  "Super",
                  "PowerBomb"
                ],
                "title": "Ammo Type",
                "description": "The type of ammo that must be spent"
              },
              "count": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammo/properties/count",
                "type": "integer",
                "minimum": 1,
                "title": "Ammo Count",
                "description": "The amount of ammo that must be spent."
              }
            }
          },
          "ammoDrain": {
            "$id": "#/definitions/logicalRequirement/items/properties/ammoDrain",
            "type": "object",
            "title": "Ammo Drain Cost",
            "description": "Always fulfilled, but if the ammo is present, it will be drained.",
            "required": [
              "type",
              "count"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammoDrain/properties/type",
                "type": "string",
                "enum": [
                  "Missile",
                  "Super",
                  "PowerBomb"
                ],
                "title": "Ammo Type",
                "description": "The type of ammo that can be drained"
              },
              "count": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammoDrain/properties/count",
                "type": "integer",
                "minimum": 1,
                "title": "Ammo Count",
                "description": "The amount of ammo that can be drained."
              }
            }
          },
          "refill": {
            "$id": "#/definitions/logicalRequirement/items/properties/refill",
            "type": "array",
            "title": "Refill",
            "description": "Always fulfilled, with an effect of fully refilling the listed resource types.",
            "items": {
              "$id": "#/definitions/logicalRequirement/items/properties/refill/items",
              "type": "string",
              "title": "Resource Type",
              "description": "The name of a resource type that becomes fully refilled",
              "enum": [
                "Missile",
                "Super",
                "PowerBomb",
                "RegularEnergy",
                "ReserveEnergy",
                "Energy"
              ]
            }
          },
          "enemyKill": {
            "$id": "#/definitions/logicalRequirement/items/properties/enemyKill",
            "type": "object",
            "title": "Enemy Kill",
            "description": "Describes the need to be able to kill a set of enemies. By default, allows all non-situational weapons (provided they can damage the enemies)",
            "required": ["enemies"],
            "additionalProperties": false,
            "properties": {
              "enemies": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/enemies",
                "type": "array",
                "title": "Enemy Groups",
                "description": "An array of enemy groups that must be killed. All enemies in each group can be hit by the same attack from an area of effect weapon.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/enemies/items",
                  "type": "array",
                  "title": "Enemy Group",
                  "description": "A single group of enemies that can be hit by the same attack from an area of effect weapon.",
                  "items": {
                    "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/enemies/items/items",
                    "type": "string",
                    "title": "Enemy Name",
                    "description": "The name of an enemy, as found in the enemies file or the boss file."
                  }
                }
              },
              "explicitWeapons": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/explicitWeapons",
                "type": "array",
                "title": "Explicit Weapons",
                "description": "A list of weapons. If present, this list defines the only weapons that can be used to fulfill the EnemyKill logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/explicitWeapons/items",
                  "type": "string",
                  "title": "Weapon Name",
                  "description": "The name of a weapon, as found in the weapons file."
                }
              },
              "excludedWeapons": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/excludedWeapons",
                "type": "array",
                "title": "Excluded Weapons",
                "description": "A list of weapons. If present, this list defines weapons that cannot be used to fulfill this EnemyKill logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/excludedWeapons/items",
                  "type": "string",
                  "title": "Weapon Name",
                  "description": "The name of a weapon, as found in the weapons file."
                }
              },
              "farmableAmmo": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/farmableAmmo",
                "type": "array",
                "title": "Farmable Ammo",
                "description": "A list of ammo types that are considered farmable during this enemy kill. It voids all ammo costs for that type, unless superseded by a boss scenario.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/farmableAmmo/items",
                  "type": "string",
                  "title": "Ammo Type",
                  "description": "The name of an ammo type, which won't get spent (unless superseded by a boss scenario)."
                }
              }
            }
          },
          "acidFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/acidFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Acid Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in acid."
          },
          "gravitylessAcidFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/gravitylessAcidFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Gravityless Acid Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in acid, with Gravity Suit turned off, even if available."
          },
          "draygonElectricityFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/draygonElectricityFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Draygon Electricity Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames grapples to a broken Draygon turret."
          },
          "enemyDamage": {
            "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage",
            "type": "object",
            "title": "Enemy Dammage",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from an enemy.",
            "required": [
              "enemy",
              "type",
              "hits"
            ],
            "additionalProperties": false,
            "properties": {
              "enemy": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage/properties/enemy",
                "type": "string",
                "title": "Enemy Name",
                "description": "The name of an enemy that damage must be taken from, as found in the enemies file."
              },
              "type": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage/properties/type",
                "type": "string",
                "title": "Attack Type",
                "description": "The name of the enemy attack that damage must be taken from, as found in the enemy's list of attacks (in the enemies file)."
              },
              "hits": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage/properties/hits",
                "type": "integer",
                "minimum": 1,
                "title": "Number of Hits",
                "description": "The number of hits that must be taken."
              }
            }
          },
          "heatFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/heatFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Heat Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in a heat room."
          },
          "gravitylessHeatFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/gravitylessHeatFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Gravityless Heat Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in a heated environment, with Gravity Suit turned off, even if available."
          },
          "hibashiHits": {
            "$id": "#/definitions/logicalRequirement/items/properties/hibashiHits",
            "type": "integer",
            "minimum": 1,
            "title": "Hibashi Hits",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from Norfair flame pillars (called Hibashi)."
          },
          "lavaFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/lavaFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Lava Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in lava."
          },
          "gravitylessLavaFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/gravitylessLavaFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Gravityless Lava Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in lava, with Gravity Suit turned off, even if available."
          },
          "samusEaterFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/samusEaterFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Samus Eater Frames",
            "description": "Fulfilled by spending an amount of energy that correlates to the number of frames captured by a Samus Eater."
          },
          "metroidFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/metroidFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Metroid Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames drained by a Metroid."
          },
          "energyAtMost": {
            "$id": "#/definitions/logicalRequirement/items/properties/energyAtMost",
            "type": "integer",
            "minimum": 1,
            "title": "Energy at Most",
            "description": "Fulfilled by having Samus' energy drop to a maximum of this value, regardless of how much she had coming in."
          },
          "spikeHits": {
            "$id": "#/definitions/logicalRequirement/items/properties/spikeHits",
            "type": "integer",
            "minimum": 1,
            "title": "Spike Hits",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from spikes."
          },
          "thornHits": {
            "$id": "#/definitions/logicalRequirement/items/properties/thornHits",
            "type": "integer",
            "minimum": 1,
            "title": "Thorn Hits",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from thorns (the less damaging spikes found mainly in Brinstar)."
          },
          "doorUnlockedAtNode": {
            "$id": "#/definitions/logicalRequirement/items/properties/doorUnlockedAtNode",
            "type": "integer",
            "title": "Door Unlocked at Node",
            "description": "Fulfilled by all Lock requirements, if any, on a Door Node being already unlocked."
          },
          "obstaclesCleared": {
            "$id": "#/definitions/logicalRequirement/items/properties/obstaclesCleared",
            "type": "array",
            "title": "Obstacles Cleared",
            "description": "Fulfilled by having all of the listed obstacles already cleared",
            "items": {
              "$id": "#/definitions/logicalRequirement/items/properties/obstaclesCleared/items",
              "type": "string",
              "minItems": 1
            }
          },
          "obstaclesNotCleared": {
            "$id": "#/definitions/logicalRequirement/items/properties/obstaclesNotCleared",
            "type": "array",
            "title": "Obstacles Not Cleared",
            "description": "Fulfilled by having all of the listed obstacles not cleared",
            "items": {
              "$id": "#/definitions/logicalRequirement/items/properties/obstaclesNotCleared/items",
              "type": "string",
              "minItems": 1
            }
          },
          "resourceCapacity": {
            "$id": "#/definitions/logicalRequirement/items/properties/resourceCapacity",
            "type": "array",
            "title": "Resource Capacity",
            "description": "Fulfilled by having at least the maximum capacity for all given resource types",
            "items": {
              "$id": "#/definitions/logicalRequirement/items/properties/resourceCapacity/items",
              "type": "object",
              "required": [
                "type",
                "count"
              ],
              "minItems": 1,
              "maxItems": 5,
              "additionalProperties": false,
              "properties": {
                "type": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resourceCapacity/properties/items/type",
                  "type": "string",
                  "enum": [
                    "Missile",
                    "Super",
                    "PowerBomb",
                    "RegularEnergy",
                    "ReserveEnergy"
                  ],
                  "title": "Resource Type",
                  "description": "The type of resource held."
                },
                "count": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resourceCapacity/properties/items/count",
                  "type": "integer",
                  "minimum": 0,
                  "title": "Resource Count",
                  "description": "The amount of resource capacity that Samus must have."
                }
              }
            }
          },
          "adjacentRunway": {
            "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway",
            "type": "object",
            "title": "Adjacent Runway",
            "description": "Fulfilled by being able to come in via a specific door, if the door in the adjacent room has a runway that fulfills the other properties of this logical element.",
            "required": [
              "fromNode",
              "usedTiles"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNode": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/fromNode",
                "type": "integer",
                "title": "From Node",
                "description": "The in-room ID of the node through which the adjacent runway must be accessed."
              },
              "usedTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/usedTiles",
                "type": "number",
                "title": "Used Tiles",
                "description": "The number of effective tiles the runway in the adjacent room must have."
              },
              "inRoomPath": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/inRoomPath",
                "type": "array",
                "title": "In-Room Path",
                "description": "The path of nodes that must have been followed by the player since entering the room in order for this adjacentRunway to be usable.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/inRoomPath/items",
                  "type": "integer",
                  "title": "In-Room Path node",
                  "description": "The ID of a node that is part of this path"
                }
              },
              "physics": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/physics",
                "type": "array",
                "title": "Appropriate Physics",
                "description": "An optional array describing which physics are acceptable in order for this adjacentRunway to be usable. All physics are acceptable if this is missing.",
                "minItems": 1,
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/physics/items",
                  "$ref" : "m3-region.schema.json#/definitions/physics",
                  "description": "A physics that is acceptable in order for this adjacentRunway to be usable."
                }
              },
              "useFrames":{
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/useFrames",
                "type": "integer",
                "title": "Use Frames",
                "description": "An optional value that indicates a number of frames that Samus must spend at the adjacent runway. She should take appropriate damage according to that door's environment (acid/lava) and that room's environment (heat) when applicable.",
                "minimum": 1
              },
              "overrideRunwayRequirements": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/overrideRunwayRequirements",
                "type": "boolean",
                "title": "Override Runway Requirements",
                "description": "An optional value that indicates whether logical requirements on the runway itself d be ignored. If missing, this should be interpreted as false."
              }
            }
          },
          "adjacentJumpway": {
            "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway",
            "type": "object",
            "title": "Adjacent Jumpway",
            "description": "Fulfilled by the adjacent room having a jumpway with specified characteristics.",
            "required": [
              "fromNode",
              "jumpwayType"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNode": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway/properties/fromNode",
                "type": "integer",
                "title": "From Node",
                "description": "The in-room ID of the node through which Samus must enter."
              },
              "jumpwayType": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway/properties/jumpwayType",
                "$ref": "m3-region.schema.json#/properties/rooms/items/properties/nodes/items/properties/jumpways/items/properties/jumpwayType",
                "title": "Jumpway Type",
                "description": "Type of jumpway required in the adjacent room."
              },
              "minHeight": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway/properties/minHeight",
                "type": "number",
                "title": "Minimum Height",
                "description": "Minimum height of jumpway that will satisfy the requirement."
              },
              "maxHeight": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway/properties/maxHeight",
                "type": "number",
                "title": "Maximum Height",
                "description": "Maximum height of jumpway that will satisfy the requirement."
              },
              "maxLeftPosition": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway/properties/maxLeftPosition",
                "type": "number",
                "title": "Maximum Left Position",
                "description": "Maximum value of the jumpway leftPosition that will satisfy the requirement."
              },
              "minRightPosition": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentJumpway/properties/minRightPosition",
                "type": "number",
                "title": "Minimum Right Position",
                "description": "Minimum value of the jumpway rightPosition that will satisfy the requirement."
              }
            }
          },
          "canComeInCharged": {
            "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged",
            "type": "object",
            "title": "Can Come in Charged",
            "description": "Fulfilled by being able to come into the room via a specific door, with a shinespark charge that has at least a number of frames remaining.",
            "required": [
              "fromNode",
              "framesRemaining"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNode": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/fromNode",
                "type": "integer",
                "title": "From Node",
                "description": "The in-room ID of the node through which a shinespark charge must be carried."
              },
              "inRoomPath": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/inRoomPath",
                "type": "array",
                "title": "In-Room Path",
                "description": "The path of nodes that must have been followed by the player since entering the room in order for this canComeInCharged to be usable.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/inRoomPath/items",
                  "type": "integer",
                  "title": "In-Room Path node",
                  "description": "The ID of a node that is part of this path"
                }
              },
              "framesRemaining": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/framesRemaining",
                "type": "integer",
                "minimum": 0,
                "maximum": 180,
                "title": "Frames Remaining",
                "description": "The number of frames that must be left on the shinespark charge when coming in."
              },
              "unusableTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/unusableTiles",
                "type": "number",
                "minimum": 0,
                "title": "Unusable Tiles",
                "description": "The number of contiguous tiles that are part of the runway but cannot be used to charge this shinespark."
              }
            }
          },
          "canShineCharge": {
            "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge",
            "type": "object",
            "title": "Can Shine Charge",
            "description": "Fulfilled by being able to charge a shinespark under the described conditions.",
            "required": [
              "usedTiles",
              "openEnd"
            ],
            "additionalProperties": false,
            "properties": {
              "usedTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/usedTiles",
                "type": "number",
                "minimum": 1,
                "maximum": 33,
                "title": "Used Tiles",
                "description": "The number of contiguous tiles that are available to charge a shinespark."
              },
              "gentleUpTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/gentleUpTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Gentle Up Tiles",
                "description": "The number of tiles that slope gently upward (going up by half a tile)."
              },
              "gentleDownTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/gentleDownTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Gentle Down Tiles",
                "description": "The number of tiles that slope gently downward (going down by half a tile)."
              },
              "steepUpTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/steepUpTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Steep Up Tiles",
                "description": "The number of tiles that slope steeply upward (going up by a tile)."
              },
              "steepDownTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/steepDownTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Steep Down Tiles",
                "description": "The number of tiles that slope steeply downward (going down by a tile)."
              },
              "startingDownTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/startingDownTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Starting Down Tiles",
                "description": "The number of tiles that slope downwards at the start of a run, preventing the execution of a stutter."
              },
              "openEnd": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/openEnd",
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "title": "Number of Open Ends",
                "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room."
              }
            }
          },
          "shinespark": {
            "$id": "#/definitions/logicalRequirement/items/properties/shinespark",
            "type": "object",
            "title": "Shinespark",
            "description": "Fulfilled by having sufficient energy to perform a shinespark lasting a given number of frames.",
            "required": [
              "frames"
            ],
            "additionalProperties": false,
            "properties": {
              "frames": {
                "$id": "#/definitions/logicalRequirement/items/properties/shinespark/properties/frames",
                "type": "integer",
                "minimum": 1,
                "title": "Shinespark Frames",
                "description": "The duration (in frames) of the shinespark that must be executed. This defines the energy cost of the shinespark assuming it is not interrupted by running down to 29 energy."
              },
              "excessFrames": {
                "$id": "#/definitions/logicalRequirement/items/properties/shinespark/properties/excessFrames",
                "type": "integer",
                "minimum": 0,
                "title": "Excess Shinespark Frames",
                "description": "The shinespark duration (in frames) that is not required to complete the objective of the shinespark. Subtracting this from the `frames` defines the lower limit of the shinespark energy cost."
              }
            }
          },
          "resetRoom": {
            "$id": "#/definitions/logicalRequirement/items/properties/resetRoom",
            "type": "object",
            "title": "Reset Room",
            "description": "Fulfilled by entering the room in a specified node, and avoid visiting barred nodes.",
            "required": [
              "nodes"
            ],
            "additionalProperties": false,
            "properties": {
              "nodes": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodes",
                "type": "array",
                "title": "Nodes",
                "description": "The list of nodes from which entering the room is required to fulfill this logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodes/items",
                  "type": "integer",
                  "title": "Node ID",
                  "description": "The in-room ID of a node."
                }
              },
              "nodesToAvoid": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodesToAvoid",
                "type": "array",
                "title": "Nodes to Avoid",
                "description": "The list of nodes that must not have been visited since entering the room in order to fulfill this logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodesToAvoid/items",
                  "type": "integer",
                  "title": "Node ID",
                  "description": "The in-room ID of a node."
                }
              },
              "mustStayPut": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/mustStayPut",
                "type": "boolean",
                "title": "Must Stay Put",
                "description": "Indicates that no other node but the entry node may be visited in order to fulfill this logical element. Must not be defined when it is intended to be false, unless there are no nodes or obstacles to avoid."
              }
            }
          },
          "comeInWithRMode": {
            "$id": "#/definitions/logicalRequirement/items/properties/comeInWithRMode",
            "type": "object",
            "title": "Come in With R-Mode",
            "description": "Fulfilled by being able to come into the room via one of a specific set of doors to obtain R-mode (not including G-mode). This implicitly requires the tech canEnterRMode as well as XRayScope and ReserveTank items.",
            "required": [
              "fromNodes"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNodes": {
                "$id": "#/definitions/logicalRequirement/items/properties/comeInWithRMode/properties/fromNodes",
                "type": "array",
                "title": "From Nodes",
                "description": "A list of in-room node IDs, through one of which we must obtain R-mode (not including G-mode) in order to satisfy this logical element",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/comeInWithRMode/properties/fromNode/items",
                  "type": "integer",
                  "title": "From Node",
                  "description": "The ID of a node through which we may obtain R-mode (not including G-mode) in order to satisfy this logical element"
                }
              }
            }
          },
          "comeInWithGMode": {
            "$id": "#/definitions/logicalRequirement/items/properties/comeInWithGMode",
            "type": "object",
            "title": "Come in With G-Mode",
            "description": "Fulfilled by being able to come into the room via one of a specific set of doors with G-mode (direct or indirect). This implicitly requires the tech canEnterGMode as well as XRayScope and ReserveTank items and a matching leaveWithGModeSetup (with non-zero reserve energy) or leaveWithGMode property on the neighboring door.",
            "required": [
              "fromNodes",
              "mode",
              "artificialMorph"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNodes": {
                "$id": "#/definitions/logicalRequirement/items/properties/comeInWithGMode/properties/fromNodes",
                "type": "array",
                "title": "From Nodes",
                "description": "A list of in-room node IDs, one of which we must come in through with G-mode in order to satisfy this logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/comeInWithGMode/properties/fromNodes/items",
                  "type": "integer",
                  "title": "From Node",
                  "description": "The ID of a node which we may come in through with G-mode in order to satisfy this logical element."
                }
              },
              "mode": {
                "$id": "#/definitions/logicalRequirement/items/properties/comeInWithGMode/properties/mode",
                "type": "string",
                "enum": [
                  "direct",
                  "indirect",
                  "any"
                ],
                "title": "Mode",
                "description": "Whether we must come in with direct G-mode, indirect G-mode, or either"
              },
              "artificialMorph": {
                "$id": "#/definitions/logicalRequirement/items/properties/comeInWithGMode/properties/artificialMorph",
                "type": "boolean",
                "title": "Artificial Morph",
                "description": "Whether we must come in with artificial morph (also satisfied by having Morph collected)"
              },
              "mobility": {
                "$id": "#/definitions/logicalRequirement/items/properties/comeInWithGMode/properties/mobility",
                "type": "string",
                "enum": [
                  "mobile",
                  "immobile",
                  "any"
                ],
                "default": "any",
                "title": "Mobility",
                "description": "Whether Samus must come in mobile, immobile, or either."
              }
            }
          },
          "itemNotCollectedAtNode": {
            "$id": "#/definitions/logicalRequirement/items/properties/itemNotCollectedAtNode",
            "type": "integer",
            "title": "Item Not Collected",
            "description": "Fulfilled by an item at a given node not having been collected yet."
          }
        }
      }
    }
  }
}
